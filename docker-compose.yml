services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=${POSTGRES_DATABASE_URL}
      - MONGO_URI=mongodb://mongo_user:mongo_password@mongo:27017/db_name?authSource=admin
      - REDIS_URL=${CACHE_URL}
    volumes:
      - .:/app
    networks:
      - app-network
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: celery.Dockerfile
    container_name: celery_worker
    working_dir: /worker
    command: >
      celery -A my_celery.celery_app worker
        --uid=1
        --gid=1
        --loglevel=DEBUG
        --autoscale=10,2
        --prefetch-multiplier=1
        --without-gossip
        --without-mingle
        --without-heartbeat
    volumes:
      - .:/worker
    depends_on:
      - rabbitmq
      - redis
    networks:
      - app-network

  postgres:
    image: postgres:17.5-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:8.0.3-noble
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_password
    command: mongod --wiredTigerCacheSizeGB 1 --logpath /var/log/mongodb/mongod.log --logappend --setParameter logLevel=1
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    command: redis-server --notify-keyspace-events KxE
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 3

  rabbitmq:
    image: rabbitmq:4.1.0-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  app-network:

volumes:
  postgres_data:
  mongo_data:
  redis_data:
